///////////////////////////////////////////////////////////////////////////////
// 
///////////////////////////////////////////////////////////////////////////////
#include "murat/ana/scripts/modules.hh"

def_name track_001("track_ana");
def_name track_002("val_cpr");
def_name track_003("track_debug");
def_name track_004("cal_ana");
def_name track_005("track_ana_tandip_12");
def_name track_006("track_debug_tandip_12");
def_name track_007("track_ana_muon");
def_name track_008("track_comp");

///////////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
void  track_ana(int PdgCode = 11, int GeneratorCode = 2) {
//-----------------------------------------------------------------------------
// configure analysis module
//-----------------------------------------------------------------------------
  m_trk = (TTrackAnaModule*) g.x->AddModule("TTrackAnaModule",0);  
  m_trk->SetPdgCode      (PdgCode);
  m_trk->SetGeneratorCode(GeneratorCode);
}

//-----------------------------------------------------------------------------
void  track_ana_muon() {
//-----------------------------------------------------------------------------
// configure analysis module to handle signal muons
// generated by SingleParticleReactionGun
//-----------------------------------------------------------------------------
  m_trk = (TTrackAnaModule*) g.x->AddModule("TTrackAnaModule",0);  
  m_trk->SetPdgCode(13);
  m_trk->SetGeneratorCode(28);
}

//-----------------------------------------------------------------------------
void  track_ana_tandip_12(int GeneratorCode = 2) {
  m_trk = (TTrackAnaModule*) g.x->AddModule("TTrackAnaModule",0);  
  m_trk->GetTrackID()->SetMinTanDip(1.);
  m_trk->GetTrackID()->SetMaxTanDip(2.);
}

//-----------------------------------------------------------------------------
void  val_cpr(int Bit = -1) {
//-----------------------------------------------------------------------------
// configure analysis modules
//-----------------------------------------------------------------------------
  m_vcpr = (TValCalPatRecModule*) g.x->AddModule("TValCalPatRecModule",0);  

  if (Bit != -1) {
    m_vcpr->SetDebugBit(Bit,1);
  }
}


void  track_debug(int Bit, int PdgCode = 11, int GeneratorCode = 2) {
//-----------------------------------------------------------------------------
// configure analysis module
//-----------------------------------------------------------------------------
  m_trk = (TTrackAnaModule*) g.x->AddModule("TTrackAnaModule",0);  
  m_trk->SetDebugBit(Bit,1);
  m_trk->SetPdgCode      (PdgCode);
  m_trk->SetGeneratorCode(GeneratorCode);
}


//-----------------------------------------------------------------------------
void  track_debug_tandip_12(int Bit, int GeneratorCode = 2) {
  m_trk = (TTrackAnaModule*) g.x->AddModule("TTrackAnaModule",0);  
  m_trk->GetTrackID()->SetMinTanDip(1.);
  m_trk->GetTrackID()->SetMaxTanDip(2.);
  m_trk->SetDebugBit(Bit,1);
}

//-----------------------------------------------------------------------------
void  cal_ana() {
//-----------------------------------------------------------------------------
// configure analysis module
//-----------------------------------------------------------------------------
  m_cal = (TCalAnaModule*) g.x->AddModule("TCalAnaModule",0);  
}

//-----------------------------------------------------------------------------
void  track_comp() {
//-----------------------------------------------------------------------------
// configure analysis module
//-----------------------------------------------------------------------------
  m_tcm = (TTrackCompModule*) g.x->AddModule("TTrackCompModule",0);  
  m_tcm->SetPdgCode      (11);
  m_tcm->SetGeneratorCode(28);
}
