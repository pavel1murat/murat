+TITLE  :Test 
#+AUTHOR: Pavel Murat
#+EMAIL : murat@fnal.gov
#+BABEL: :cache yes :results output graphics :exports both :tangle yes 


* shell example
#+begin_src sh
  echo "This file takes down `du -h org-babel.org |sed 's/\([0-9k]*\)[ ]*org-babel.org/\1/'`"
#+end_src

#+RESULTS:
: This file takes down


* R graphics output

#+begin_src R :var ndf=25  :exports results :results graphics :file test_001.pdf :width 6 :height 4

x1=seq(0,3,0.1) 
plot(x1,dchisq(x1*ndf,ndf),main="Chi-distribution with NDF=ndf",type="l",col="blue") 

#+end_src

#+RESULTS:
[[file:test_001.pdf]]

#+begin_src R :file a.png :session
  x <- rnorm(10)
  y <- rnorm(10)
  plot(x, y)
#+end_src

#+RESULTS:
[[file:a.png]]

Same plot with larger dimension:

#+begin_src R :session :results output :file b.png :width 800 :height 800
  x <- rnorm(10)
  y <- rnorm(10)
  plot(x, y)
  png();
#+end_src

#+RESULTS:
[[file:b.png]]

  
* RUBY example

#+begin_src ruby
require 'date'
"This file was last evaluated on #{Date.today}"
#+end_src

#+RESULTS:
: This file was last evaluated on 2018-11-13

* PYTHON examples

# #to execute a block: 'C-c C-c'
#+name: test1
#+begin_src python :var x=5
import time
a = format("Today is %s | x = %12.5f" % (time.ctime(),x))
return (a, '5+3x = ', 5 + 3*x)
#+end_src

#+RESULTS: test1
| Today is Tue Nov 13 15:28:15 2018 | x =      5.00000 | 5+3x = | 20 |

# to execute call : 'C-c C-v C-e'
#+call: test1(41)

#+RESULTS:
| Today is Wed Sep  5 16:59:00 2018 | x =     41.00000 | 5+3x = | 128 |

#+begin_src python :session :results file
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
fig=plt.figure(figsize=(3,2))
plt.plot([1,3,2])
fig.tight_layout()
plt.show()
# plt.savefig(myfig.pdf')
# 'myfig.pdf'                          # return this to org-mode
#+end_src

#+RESULTS:
[[file:]]


* STNTUPLE Mu2e event mixing job performance vs the background level (use PYTHON)

  - this is really cool

#   #   #+begin_src python :session :results file
#+begin_src python :results file
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt

fig=plt.figure(figsize=(10,10))

plt.plot([0,1,2,4],[0.3,1.5,2.8,6.6])
fig.tight_layout()
fn='mu2e_mixing_timing.pdf';
plt.savefig(fn)
fn                                         # return this to org-mode
#+end_src

#+RESULTS:
[[file:None]]


* R examples

** R example 000 : naming of the output file 
#+attr_latex: width=8cm placement=[htbp]
#+begin_src R :results output graphics :exports results :file (org-babel-temp-file "./figure-" ".pdf")
    require(ggplot2) 
    a <- rnorm(100)  
    b <- 2*a + rnorm(100)
    d <- data.frame(a,b) 
    ggplot(d,aes(a,b)) + geom_point()
#+end_src

#+RESULTS:
[[file:/tmp/babel-5drPGM/figure-wsy5gO.pdf]]

** R example 000
#+begin_src R :results output graphics :exports results :file (org-babel-temp-file "./figure-" ".pdf")
  require(ggplot2)                                                                                                                           
  x1=seq(0,5,0.1) 
  plot(x1,dchisq(x1*6,6),main="Chi-distribution with df=6",type="l",col="blue") 
#+end_src

#+RESULTS:
[[file:/tmp/babel-4318XWU/figure-4318QDp.pdf]]

** R example 001
#+begin_src R  :results file 

x <- c(0,1,2,4); y <- c(0.3,1.5,2.8,10.6)    # create some data 
par(pch=22, col="red")                       # plotting symbol and color 

# opts = c("p","l","o","b","c","s","S","h")  # 
# par(mfrow=c(2,4))                          # all plots on one page 

par(mfrow=c(1,1))                            # just one graphics option
opts = c("b")                                # 

fn = 'aa.pdf'
pdf(file=fn)

for(i in 1:length(opts)){ 
  heading = paste("type=",opts[i]) 
  plot(x, y, type="n", main=heading) ; lines(x, y, type=opts[i]) 
}
dev.off();
n = 100
fn
#+end_src

#+RESULTS:
[[file:aa.pdf]]

** R example 002
#+begin_src R :results file 
fn = 'cc.pdf'
pdf(file=fn)
# plot(1:100, rnorm(100) * 1:100)
n = 50
plot(1:n, rnorm(n) * 1:n)
fn
#+end_src

#+RESULTS:
[[file:cc.pdf]]



* PYTHON interactive graphics example 
#+begin_src python :results none
import numpy as np
import matplotlib as mpl
from matplotlib import pyplot as plt
graylevel = 0.75
mpl.rc('figure', facecolor = (graylevel, graylevel, graylevel), edgecolor ='r')
X = np.linspace(0, 7, 1024)
plt.plot(X, np.sin(X))
plt.plot(X, np.cos(X))
plt.draw()
plt.show()
#+end_src]
