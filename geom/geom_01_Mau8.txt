//
// Main geometry file for Mu2e.
//
// $Id: geom_01_Mau8.txt,v 1.1 2013/07/02 16:13:34 murat Exp $
// $Author: murat $
// $Date: 2013/07/02 16:13:34 $
//
// Original author Rob Kutschke
//
// Warning:  do not write 10000. as 10,000.; it will be read as two numbers (10., 0.).

string detector.name  = "g4geom_v00";

bool hasHall            = true;
bool hasTarget          = true;
bool hasProtonAbsorber  = true;
bool hasNeutronAbsorber = true; // note the two subcomponents, see neutronabsorber section below;
bool hasVaneCalorimeter = false;
bool hasDiskCalorimeter = true;
bool hasBFieldManager   = true;
bool hasBeamline        = true;
bool hasVirtualDetector = true; // some components, e.g. ProtonAbsorber assume vd presence now;
bool hasCosmicRayShield = true; // note the two subcomponents, see crs section below;
bool hasMBS             = true; // note the two subcomponents, see mbs section below; 
                                 // no MBS implies no downstream hole in Cosmic Ray Passive Shield
                                 // and no CryoSeal and no MBS EndPlug; 
                                 // Magnetic field may be affected as well

// Write mu2e geometry into a GDML file
bool   writeGDML        = false;
string GDMLFileName     = "mu2e.gdml";

// Uncomment exactly one tracker.
#include "Mu2eG4/test/ttracker_v2.txt"
//#include "Mu2eG4/test/ttracker_meco.txt"
//#include "Mu2eG4/test/ltracker_v0.txt"
//#include "Mu2eG4/test/itracker_v42.txt"
//#include "Mu2eG4/test/dummytracker.txt"

// Uncomment to enable debug printout on a per event or per track basis.
//vector<int> g4.steppingActionEventList = { 0, 1 };
//vector<int> g4.steppingActionTrackList = { 1 };
//vector<int> g4.strawSDEventList        = { 0, 1, 2, 3 };
//vector<int> g4.itgaslayerSDEventList   = { 0, 1, 2, 3 };
//vector<int> g4.trackingActionEventList = { 0, 1, 2, 3, 4, 5};

// Some G4 controls which does not allow it to consume all the memory
// or to spend all the time tracking one bad particle
int g4.steppingActionMaxSteps = 10000;
int g4.stepsSizeLimit = 10000;
int g4.particlesSizeLimit = 10000;
double g4.pointTrajectoryMomentumCut = 50.;


// If the following number is not zero, G4 will kill all particles alive
// at that time.
double g4.steppingActionMaxGlobalTime = 0; //ns

// The information (location, momentum) of all particles will be
// recorded in the output files for particular moments in time
//vector<double> g4.steppingActionTimeVD = { 500, 700, 1000 }; //ns

// Enable/disable code that kills uninteresting tracks in SteppingAction,
// Put a list of G4 volume names where the tracks should be killed,
// for example { "HallAir" }.
vector<string> g4SteppingAction.killInTheseVolumes = {};
bool   g4SteppingAction.killerVerbose = false;

// These are used in both SteppingAction and StackingAction.
bool   g4.killLowEKine  = false;
double g4.eKineMin      = 0.0;    // Kinetic energy in MeV

// One can set this limit particle-specific:
// vector<int>    g4.killLowEKinePDG = {211, -211,   13,  -13,   11,  -11};
// vector<double> g4.eKineMinPDG     = {9.0,  9.0, 20.0, 20.0, 95.0, 95.0};

// This setting is used for special studies (stored muons)
// bool g4.killPitchToLowToStore = false;

// current G4 stepper choices are shown below, extend Mu2eWorld.cc if more are needed
// G4ClassicalRK4
// G4ImplicitEuler
// G4ExplicitEuler
// G4SimpleRunge
// G4SimpleHeum
// G4HelixImplicitEuler
// G4HelixSimpleRunge
string g4.stepper = "G4ClassicalRK4";

// Enable the Mu2e written version of the decay of muonic atoms.
bool g4.doMuMinusConversionAtRest = false;

// Define the value of B(pi-> e nu).
// The allowed values are: { PDG, All, None, nnnnnn } where nnnnnn is any numerical value in the range [0,1]
string g4.PiENuPolicy          = PDG;
int    g4.PiENuPolicyVerbosity = 0;

// List of PDG ids of particles for which to switch off decay.
vector<int> g4.noDecay = {};

// Choose a PhysicsList and set related parameters.
string g4.physicsListName = "QGSP_BERT_HP";
double g4.minRangeCut     = 0.01;            // mm

bool g4.printPhysicsProcessSummary = false;

// Enable the code to kill low p secondaries from cosmics.
bool g4.doCosmicKiller = false;
double g4.cosmicPcut = 0.;
double g4.yaboveDirtYmin = 0.;

// Load other materials defined specifically for Mu2e.
vector<string> mu2e.materials =
  { "HeavyConcrete", "ShieldingConcrete", "IsoButane", "StrawGas",
    "Kapton", "Scintillator", "WAGVacuum", "DSVacuum", "MBOverburden",
    "ITGasHe_90Isob_10", "ITGasHe_90CF4_10", "ITGasMix", "ITGasHe_75Isob_25_400mbar",
    "CarbonFiber_resin", "CarbonFiber", "PolypropyleneFoam", "CFoam", "CFoam_332", 
    "CFoam_166", "CFoam_080", "KptFoam_030", 
    "Polyethylene092B050d095", "Polyethylene092B300d119",
    "Polyethylene092Li075d106", "Polyethylene092", "StainlessSteel", "Lyso_01",
    "A95083", "NbTi", "NbTiCu", "AL999Ni001", "C_19_H_20_O_4", "C_10_H_18_O_4",
    "C_9_H_22_N_2", "Epotek301", "G10", "SCCableInsulation", "SCCable",
    "ZirconiumHydridePolyethylene", "EGlass", "G10_FR4",
    "Polyethylene0020"
};

// Control printout of element and material lists.
bool g4.printElements  = false;
bool g4.printMaterials = false;

// make detector volume structure visible where enabled
bool g4.forceAuxEdgeVisible = true;
// invoke volume overlap check where enabled (draws random numbers)
bool g4.doSurfaceCheck = false;

// The world volume contains a formal "hall" box that is surrounded by
// dirt at the bottom and (part way) on the sides.  The rest is filled
// with air.  The "margins" are the distances from the hall box to the
// world boundaries.   We specify the minimal allowed margins; the actual
// values may be increased to position Mu2e in the G4 world volume as
// specified by world.mu2eOriginInWorld
//
double world.minimalMargin.top = 3000;
double world.minimalMargin.bottom = 3000;
double world.minimalMargin.xmin = 3000;
double world.minimalMargin.xmax = 3000;
double world.minimalMargin.zmin = 3000;
double world.minimalMargin.zmax =  3000;
vector<double> world.mu2eOriginInWorld = { 0, 0, 0}; // mm

string world.materialName = "G4_AIR";
bool   world.boxVisible   = true;
bool   world.boxSolid     = false;
int    world.verbosityLevel = 0;

string dirt.overburdenMaterialName = "MBOverburden";

bool   world.dirt.visible         = true;
bool   world.dirt.solid           = false;

// The top surface of the world dirt is at the grade level.
// Define it with respect to the experimental hall:
double hall.floorTopDepthBelowGrade = 7620; // docdb-472v5 p18: (746'-0'' - 721'-0'')

// Positions of the hall walls
double hall.insideXmin = -7359;
double hall.insideXmax = +6250;
double hall.insideZmax = +33041;
double hall.insideXDSCorner = -500;
double hall.insideZDSCorner = 3359;
double hall.insideXPSCorner = 1005;
double hall.insideZPSCorner = -3359;
double hall.insideZExtMonUCIWall = -22000; // -17129;

// docdb-472v5 p16:
// (top ceiling =  746'-6'') - (ceiling thickness = 3'-0'') - (top floor = 721'-0'')
//   = 22'-6'' = 6858 mm
double hall.insideFullHeight = 6858.;

// Hall wall details
double hall.floorThick   = 300.;
double hall.ceilingThick = 914.4; // 3', docdb-472v5 p16 (section "E")
double hall.wallThick    = 300.;
double hall.wallExtMonUCIThick  = 600.;
string hall.wallMaterialName = "G4_CONCRETE";
string hall.ceilingMaterialName = "HeavyConcrete";
string hall.insideMaterialName = "G4_AIR";

bool   hall.formalBoxVisible        = false;
bool   hall.formalBoxSolid          = false;

bool   hall.floorVisible            = true;
bool   hall.floorSolid              = true;
bool   hall.ceilingVisible          = true;
bool   hall.ceilingSolid            = false;
bool   hall.wallsVisible            = true;
bool   hall.wallsSolid              = false;

// This defines the vertical position of the hall air volume
double mu2e.origin.heightAboveHallFloor = 2928.; // 20120221\ Facility\ data\ for\ MARS.xlsx

// X-offset of the PS(+x) and DS(-x) from the Mu2e origin.
// The origin of the detector coordinate system is on the DS axis at the specified z.
double mu2e.solenoidOffset   =  3904.;   // mm
double mu2e.detectorSystemZ0 = 10200.;   // mm  G4BL: (17730-7292=9801 mm)

#include "Mu2eG4/test/DetectorSolenoid_v01.txt"
#include "Mu2eG4/test/ProductionSolenoid_v01.txt"
#include "Mu2eG4/test/psEnclosure_v01.txt"
#include "Mu2eG4/test/PSShield_v01.txt"

// Parameters for TS volumes.
double toyTS.rVac        =  240.;          // Outer radius of vacuum volume
double toyTS.rCryo       =  700.;          // Outer radius of cryostat
double toyTS.rTorus      = 2929.;          // Bend radius of the torus
double toyTS1.halfLength =  500.;
double toyTS5.halfLength =  500.;
bool   toyTS.visible        = true;
bool   toyTS.solid          = false;

// PBAR Absorber

//double pbar.halfLength = 60.0e-3; // Use this value for the new default
double pbar.halfLength = 180.0e-3;
string pbar.materialName = "G4_Be";

bool pbarwedge.build = false; 
//bool pbarwedge.build = true; // Use this for the new default
double pbarwedge.y0  = -10.;
double pbarwedge.y1  = 239.; // Do not exceed toyTS.rVac
double pbarwedge.dz0 = 0.001;// G4 does not like 0
double pbarwedge.dz1 = 1.1;  // This makes total thickness changing
                             // from 0.12 mm to 1.0 mm over the 
                             // height of window

// Collimators

bool   coll.visible        = true;
bool   coll.solid          = false;
int    coll.verbosityLevel = 0;

double coll1.halfLength = 500.0;
// innerRadius1,2 describe the inner cone, which is a cyliner if r1==r2
// r1 is at the smaller z
double coll1.innerRadius1 = 150.0;
double coll1.innerRadius2 = 150.0;
double coll1.innerRadius3 = 160.0; 
// r3 is outer cylinder inner radius; set it and r2 to 170mm and r1==150mm
// and both materials to G4_Cu to get the previous setup
string coll1.material1Name = "G4_C";
string coll1.material2Name = "G4_Cu";

double coll3.halfLength       = 400.0;
double coll3.hole             = 50.0;
string coll3.materialName     = "G4_Cu";
double coll3.rotationAngle    = 0.0;
double coll3.holeRadius       = 150.0;
double coll3.holeHalfHeight   = 100.0;
double coll3.holeDisplacement = 90.0;

// coll5 is special; its "middle" is made out of "material"
// its "outer/external" part, if any, is made out of "absorberMaterial"
//

double coll5.halfLength    = 500.0;
double coll5.halfLengthU   =   0.0; // upstream insert; need to accomodate 2.*vdHalfLength in calc
double coll5.halfLengthD   =   0.0; // downstream insert; halfLength - u -d >= 2.*vdHalfLength
double coll5.outerRadius   = 240.0; // not to exceed toyTS.rVac
double coll5.midRadius2    = 239.98; // not to exceed outerRadius - 2.*vdHalfLength
double coll5.midRadius1    = 128.0; // not to be equal or exceed midRadius2; change materialName if needed
double coll5.innerRadius   = 128.0; // not to exceed midRadius1
string coll5.materialName = "G4_Cu";
string coll5.absorberMaterialName = "Polyethylene092";

// Muon degrader

bool muondegrader.build = false;
string muondegrader.materialName = "Polyethylene0020";
vector<double> muondegrader.R = {100,80,60};
vector<double> muondegrader.DZB = {500.0,300.0,100.0};
vector<double> muondegrader.DZT = { 50.0, 30.0, 10.0};
vector<double> muondegrader.Phi = {0.5,0.2,0.2};

// Virtual detectors

double vd.halfLength     = 0.01; //mm
int    vd.verbosityLevel = 0;
bool   vd.visible        = true;
bool   vd.solid          = false;

// // VD right in front of a hall wall
// double vd.ExtMonCommonPlane.z = -11999.99;

// Production Target in PS:

// Nominal target position in the Mu2e coordinate system: at PS center in XY, at the given Z:
double productionTarget.zNominal = -6164.5;

// Optional shift of production target from the nominal
//vector<double> productionTarget.offset = { 0., 0., 0.};


double targetPS_halfLength        =     80.;  // mm.
double targetPS_rOut              =      3.15;// mm
double targetPS_rotX              =      0.;  // degree. Active rotation.
double targetPS_rotY              =   14.00;  // degree.
string targetPS_materialName      = "G4_W";
bool   targetPS.visible           = true;
bool   targetPS.solid             = false;

#include "Mu2eG4/test/protonBeamDump_v02.txt"

#include "Mu2eG4/test/extmon_fnal_v02.txt"
#include "Mu2eG4/test/extmon_uci_v02.txt"

// Describe dummy stopping target that is just one big G4TUBS.
double dummyStoppingTarget.rIn        =     0.;
double dummyStoppingTarget.rOut       =   100.;
double dummyStoppingTarget.halfLength =   400.;
double dummyStoppingTarget.z0         =  5900.;
string dummyStoppingTarget.material   = "WAGVacuum";

//
// Describe targets.
//

// material around the targets
string         target.fillMaterial    = "DSVacuum";

// All dimensions in mm in the detector coordinate system.
// (0,0,0) = on axis in the DS at z=12000. mm
double target.z0             = -6129.0;    // 12000-(13800.00-7929) = -6129. was -6100
double target.deltaZ         =    50.0;
bool   target.visible        = true;
bool   target.solid          = false;
int    target.verbosity      =     0;

// all radii must be specified, i.e., nFoils is determined from the size
// of the radii vector.
vector<double> target.radii  =
    {  83.00,  81.89,  80.79,  79.68,  78.58,
       77.47,  76.36,  75.26,  74.15,  73.04,
       71.94,  70.83,  69.73,  68.62,  67.51,
       66.41,  65.30 };

// last material given will be repeated up to number radii.size()
vector<string> target.materials =
    { "G4_Al"};

// Variation of locations of foil centers
// z: variations from equal spacings according to z0 and deltaZ
// last will be repeated...
vector<double> target.zVars  =
    { 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0.,
      0., 0. };

// x: relative to beam axis
// last will be repeated...
vector<double> target.xVars  =
    { 0.};

// y: relative to beam axis
// last will be repeated...
vector<double> target.yVars  =
    { 0. };

// last thickness given will be repeated up to number radii.size()
vector<double> target.halfThicknesses  =
    {0.1};

// last x directional cosine given will be repeated up to number radii.size()
vector<double> target.xCos  =
    { 0.};

// last y directional cosine given will be repeated up to number radii.size()
vector<double> target.yCos  =
    { 0.};


// Crystal calorimeter
#include "Mu2eG4/test/calorimeter.txt"


// Cosmic Ray Sheld consist of the two components
// for now the are in the two sections: the fluxcrv and the crs itself
// initially the passive part was called the iron yoke or the HallSteel, the material has evolved though

bool crs.hasPassiveShield     = true;
bool crs.hasActiveShield      = true;

// Dimensions of steel, assuming constant thickness all around, and square shape.
vector<double> fluxcrv.HallSteelOffset  = {-3904.,0.0,0.0}; // mm
double fluxcrv.HallSteelHalfThick =  228.6;   // mm
double fluxcrv.HallSteelHalfSideShieldHeight = 2260.7;   // mm
double fluxcrv.HallSteelHalfRShieldLength    = 9601.0;   // mm
double fluxcrv.HallSteelHalfLShieldLength    = 7827.5;   // mm  
double fluxcrv.HallSteelHalfTShieldLength    =10058.2;   // mm  //as long as the entire detector (unlike doc-db 1378)
double fluxcrv.HallSteelHalfTSRShieldLength  = 2921.7;   // mm  //as long as the TSL shield (unlike doc-db 1378)
double fluxcrv.HallSteelHalfTSLShieldLength  =  914.5;   // mm
double fluxcrv.HallSteelHalfTSTShieldLength  =  914.5;   // mm  //doesn't exist in doc-db 1378
vector<double> fluxcrv.HallSteelRShieldCenter  = {-1778.6,  -667.3,  7818.1}; // mm
vector<double> fluxcrv.HallSteelLShieldCenter  = { 1778.6,  -667.3,  9591.6}; // mm
vector<double> fluxcrv.HallSteelTShieldCenter  = {    0.0,  1822.0,  7818.1}; // mm
vector<double> fluxcrv.HallSteelDShieldCenter  = {    0.0,  -667.3, 17647.7}; // mm
vector<double> fluxcrv.HallSteelTSRShieldCenter= {  914.5,  -667.3, -2011.5}; // mm
vector<double> fluxcrv.HallSteelTSLShieldCenter= { 2921.7,  -667.3,  2011.5}; // mm 
vector<double> fluxcrv.HallSteelTSTShieldCenter= { 2921.7,  1822.0,     0.0}; // mm 

string fluxcrv.HallSteelMaterialName = "G4_CONCRETE";
double fluxcrv.HallSteelHoleRadius   = 850;
bool   fluxcrv.visible          = true;
bool   fluxcrv.solid            = true;

// Parameters of the CRS Scintillator Modules (length in mm)
// data based mainly on Mu2e Document 388-v1 Mu2e Proposal, fig 11.6,
// p174 11.9 p.179 and fig 4.6.9/text in 1330v2

int            crs.scintillatorLayersPerModule              = 3;
int            crs.scintillatorBarsPerFullLayer             = 12;
vector<double> crs.scintillatorBarHalfLengths               = { 5.,  2350., 50.};
string         crs.scintillatorBarMaterialName              = "G4_POLYSTYRENE";
double         crs.scintillatorLayerShift                   = 15.0;
double         crs.scintillatorLayerGap                     = 1.0; // 2.0 according to doc-db 1330, but works only with 1.0
double         crs.scintillatorBarPigmentationHalfThickness = 0.125; // not used for now
string         crs.scintillatorBarPigmentationMaterialName  = "G4_TITANIUM_DIOXIDE";
vector<double> crs.scintillatorModuleOuterSheetHalfLengths  = { 0.8, 2383., 620.5}; // doc-db 1330 //0.063"=1.6mm;
string         crs.scintillatorModuleOuterSheetMaterial     = "G4_Al";
string         crs.scintillatorModuleInterLayerSheetMaterialName  = "G4_POLYSTYRENE";
double         crs.scintillatorModuleInterLayerSheetHalfThickness = 2.7; // total thickness is 40.8mm=3*(2*5.0)+2*(2*2.7)
vector<double> crs.moduleUnistrutHalfLengths                = {28.,  2383., 157.}; //???? // fig 11.9 p.179
// double         crs.wallUnistrutHalfThickness    = 28.;  // (154 - 41)/4 = 28.25 ~28 ; not used
// assume the unistrut on the steel to be of the same thickness as the one on the modules
double         crs.scintillatorOverlap                      = 29.0; // numbers add up only with a gap b/w modules of 1.0

// full, half modules, more specific numbers TBD
vector<int>    crs.shieldR_NumberOfModules  = {18,  0};
vector<int>    crs.shieldL_NumberOfModules  = {14,  0};
vector<int>    crs.shieldT_NumberOfModules  = {18,  0};
vector<int>    crs.shieldD_NumberOfModules  = { 1,  0};
vector<int>    crs.shieldTSR_NumberOfModules = { 5,  0};
vector<int>    crs.shieldTSL_NumberOfModules = { 1,  0};
vector<int>    crs.shieldTST_NumberOfModules = { 1,  0};

vector<double> crs.scintillatorShieldOffset  = {-3904.,0.,8324.5}; // mm aka CRV offset
// shields offsets wrt the above point in their local reference frame before rotation
vector<double> crs.shieldR_Offset  =  { 2160.4, -280.0,     0.0};
vector<double> crs.shieldL_Offset  =  { 2160.4,  280.0, -2424.0};
vector<double> crs.shieldT_Offset  =  { 2170.4,    0.0,     0.0};
vector<double> crs.shieldD_Offset  =  {10942.9,    0.0, -1571.2};
vector<double> crs.shieldTSR_Offset = {10594.9, -280.0,   904.5};
vector<double> crs.shieldTSL_Offset = {-6054.1,  280.0,  2860.5};
// vector<double> crs.shieldTST_Offset = { 2170.4, 8324.5, -3020.5};
vector<double> crs.shieldTST_Offset = { 2170.4, 8324.5, -3000.5};

bool   crs.vetoVisible    = true;
bool   crs.vetoSolid      = true;
int    crs.verbosityLevel = 0;


// Magnetic field
//
// Default setting is to use the full field everywhere, except the
// upstream part of DS, where uniform field is used.

// Form of DS field: 0 is full field;
//                   1 is full upstream, const downstream;
//                   2 is const throughout
// int detSolFieldForm = 1;
int detSolFieldForm = 0;

// Value of the uniform magnetic field with the DS volume.
double toyDS.bz            = 1.0;

// Gradient of field in DS2 volume. Applied only in the case
// of detSolFieldForm=1 or detSolFieldForm=2.
double toyDS.gradient      = 0.0; // Tesla/m

// This is recommended field map. See geom_mecofield.txt to use the meco field.
string bfield.format  = "G4BL";
int  bfield.verbosityLevel =  0;
bool bfield.writeG4BLBinaries     =  false;

vector<string> bfield.innerMaps = {
  "BFieldMaps/Mau8/Mu2e_DSMap.header",
  "BFieldMaps/Mau8/Mu2e_PSMap.header",
  "BFieldMaps/Mau8/Mu2e_TSuMap.header",
  "BFieldMaps/Mau8/Mu2e_TSdMap.header",
  "BFieldMaps/Mau8/PStoDumpAreaMap.header",
  "BFieldMaps/Mau8/ProtonDumpAreaMap.header"
};

vector<string> bfield.outerMaps = {
  "BFieldMaps/Mau8/ExtMonUCIInternal1AreaMap.header",
  "BFieldMaps/Mau8/ExtMonUCIInternal2AreaMap.header",
  "BFieldMaps/Mau8/ExtMonUCIAreaMap.header",
  "BFieldMaps/Mau8/PSAreaMap.header"
};

// This scale factor is of limited use.
// It can make approximate sense to scale the PS field to get a rough
// answer; the answer will be wrong in detail.
// It never makes sense to scale the TS field.
// Not sure if it ever makes sense to scale the PS field.
double bfield.scaleFactor = 1.0;

// Proton Absorber
#include "Mu2eG4/test/protonAbsorber_conical.txt"
//#include "Mu2eG4/test/protonAbsorber_helical.txt"

// Neutron Absorber (document draft dated 2010-07-16)

bool   neutronabsorber.hasExternalPart = true;
bool   neutronabsorber.hasInternalPart = true;

string neutronabsorber.materialName          = "Polyethylene092Li075d106";

double neutronabsorber.internalOuterRadius   =  940.0;
double neutronabsorber.internalInnerRadius0  =  460.0;
double neutronabsorber.internalInnerRadius1  =  710.0;
double neutronabsorber.internalInnerRadius2  =  850.0;
double neutronabsorber.internalHalfLengthZ01 = 2197.5;
double neutronabsorber.internalHalfLengthZ02 = 3515.0;
double neutronabsorber.internalZ01           = 6202.5; // 4005+8400/2

double neutronabsorber.externalHalfLengthZ   = 6220.0;
double neutronabsorber.externalHalfLengthXY  = 1475.0;
double neutronabsorber.externalHalfThickness =   75.0;
double neutronabsorber.externalZ0            = 9219.0; // 2999+15439/2

int    neutronabsorber.verbosityLevel = 0;
bool   neutronabsorber.visible      = true;
bool   neutronabsorber.solid        = false;

// Muon Beam Dump/Stop

// except for one of the Z offset values the rest is computable from the other values

// the Z values were adjusted from mu2e doc-1351 based on doc-1186 also to
// fit with the previously implemented components

// the initial implementation is described in doc-1519

bool   mbs.hasCryoSeal      = true;
bool   mbs.hasEndPlug       = true;

double mbs.BSTSInnerRadius  =   410.0;
double mbs.BSTSOuterRadius  =   430.0;
double mbs.BSTSHLength      =  1700.0;
string mbs.BSTSMaterialName = "StainlessSteel";
double mbs.BSTSZ            = 15150.0;
double mbs.SPBSInnerRadius  =   430.0;
double mbs.SPBSOuterRadius  =   452.0;
double mbs.SPBSHLength      =  1320.0;
string mbs.SPBSMaterialName = "G4_Pb";
double mbs.BSTCInnerRadius  =   390.0;
double mbs.BSTCOuterRadius  =   410.0;
double mbs.BSTCHLength      =   375.0;
string mbs.BSTCMaterialName = "Polyethylene092B300d119";
double mbs.BSBSInnerRadius  =   320.0;
double mbs.BSBSOuterRadius  =   410.0;
string mbs.BSBSMaterialName = "Polyethylene092B300d119";
double mbs.CLV2InnerRadius  =    50.0;
double mbs.CLV2OuterRadius  =   320.0;
double mbs.CLV2HLength      =    50.0;
string mbs.CLV2MaterialName = "Polyethylene092B300d119";

double mbs.CryoSealInnerRadius  =   452.0;
double mbs.CryoSealOuterRadius  =  1000.0;
double mbs.CryoSealZ            = 15580.0;
double mbs.CryoSealHLength      =   150.0;
string mbs.CryoSealMaterialName = "StainlessSteel";

double mbs.EndPlugTubeInnerRadius =   452.0;
double mbs.EndPlugTubeOuterRadius =  1000.0;
double mbs.EndPlugTubeZ           = 16653.0;
double mbs.EndPlugTubeHLength     =   197.0;
double mbs.EndPlugDiskInnerRadius =     0.0;
double mbs.EndPlugDiskOuterRadius =  1000.0;
double mbs.EndPlugDiskHLength     =    50.0;
string mbs.EndPlugMaterialName    = "StainlessSteel";

int    mbs.verbosityLevel = 0;
bool   mbs.visible      = true;
bool   mbs.solid        = false;

//
//
// End notes:
//
// 1) Sources of information:
//
//
//
// This tells emacs to view this file in c++ mode.
// Local Variables:
// mode:c++
// End:
