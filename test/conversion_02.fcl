# -*- mode:tcl -*-
#
# $Id: conversion_02.fcl,v 1.6 2014/06/10 00:13:49 murat Exp $
# $Author: murat $
# $Date: 2014/06/10 00:13:49 $

#include "fcl/minimalMessageService.fcl"
#include "fcl/standardProducers.fcl"
#include "fcl/standardServices.fcl"

process_name : Conversion02

source : {
  module_type : EmptyEvent
  maxEvents   : 20
  firstRun    :  1
}

outputs: {
  outfile : {
    module_type : RootOutput
    fileName    : "conversion_02.root"
      outputCommands :   [ "keep *_*_*_*"
#			   ,"drop mu2e::CaloClusters_*_*_*"
#			   ,"drop mu2e::CaloCrystalHits_*_*_*"
			  ]
  }
}

services : {

  message               : @local::default_message
  TFileService          : { fileName : "conversion_02.hist" }
  RandomNumberGenerator : { }

  user : {
    GeometryService        : { inputFile      : "Mu2eG4/test/geom_01.txt"            }
    ConditionsService      : { conditionsfile : "Mu2eG4/test/conditions_01.txt"      }
    GlobalConstantsService : { inputFile      : "Mu2eG4/test/globalConstants_01.txt" }
    G4Helper               : { }
    SeedService            : @local::automaticSeeds
  }
}

physics : {
    producers: {
	#    generate             : @local::generate
	generate             : {
	    module_type : StoppedMuonConversionGun
	    czmin       : -0.6
	    czmax       :  0.8
	    muonStops : {
#		inputFiles            : @nil // use --fclinput for grid submission
		inputFiles            : [ "mergedMuonStops/mustops.1025a_1426a_1504a.15318715.root" ] 
		averageNumRecordsToUse: 500000
		treeName              : "stoppedMuonDumper/stops"
		branchName            : "stops"
		verbosityLevel        : 1
	    }
	}
	
	g4run                : @local::g4run
	CaloReadoutHitsMaker : @local::CaloReadoutHitsMaker
	CaloCrystalHitsMaker : @local::CaloCrystalHitsMaker
	makeCaloCluster: {
	    module_type                   : MakeCaloClusterNew
	    diagLevel                     : 1
	    generatorModuleLabel          : generate
	    caloCrystalModuleLabel        : CaloCrystalHitsMaker
	    g4ModuleLabel                 : g4run
	    #caloReadoutModuleLabel: CaloReadoutHitsMaker
	    caloClusterAlgorithm          : closest
	    caloClusterSeeding            : energy
	    #     caloClusterSeeding    : time
	    deltaTime                     : 10.0 #ns
	    nCryPerCrystal                : 1
	    EnoiseCut                     : 0.00 #MeV
	    EclusterCut                   : 0.00 #MeV  
	    maxFullPrint                  : 201
	}
	
	randomsaver          : @local::randomsaver
	
	protonTimeMap : { module_type : GenerateProtonTimes }
	muonTimeMap   : { module_type : GenerateMuonLife }
	makeSD        : @local::makeSD
	makeSH        : @local::makeSHfromSD
	
    }

  analyzers: {

    checkhits: {
      module_type            : ReadBack
      generatorModuleLabel   : generate
      g4ModuleLabel          : g4run
      caloReadoutModuleLabel : CaloReadoutHitsMaker
      diagLevel              : 0
      minimumEnergy          : 0.000
      maxFullPrint           : 0
    }

    readStrawHits: {
      module_type      : ReadStrawHit
      makerModuleLabel : makeSH
      diagLevel        : 0
      maxFullPrint     : 0
    }

  }

    p1 : [generate, g4run,  protonTimeMap, muonTimeMap, 
	  makeSD, makeSH, 
	  CaloReadoutHitsMaker, CaloCrystalHitsMaker, 
	  makeCaloCluster, 
	  randomsaver ]
#
    #  readStrawHits
    #  e1 : [checkhits, readStrawHits, outfile]
    e1 : [checkhits, outfile]

  trigger_paths  : [p1]
  end_paths      : [e1]
}

services.user.SeedService.baseSeed         :   0
services.user.SeedService.maxUniqueEngines :  20

physics.producers.makeSH.diagLevel                   : 0
physics.producers.makeSH.maxFullPrint                : 0
physics.producers.CaloReadoutHitsMaker.diagLevel     : 0
physics.producers.CaloReadoutHitsMaker.maxFullPrint  : 0
physics.producers.CaloCrystalHitsMaker.diagLevel     : 0
physics.producers.CaloCrystalHitsMaker.maxFullPrint  : 0

# physics.producers.g4run.visMacro                     : "Mu2eG4/test/visyz.mac"
# physics.producers.g4run.trackingVerbosityLevel       : 1

// Apply the time offsets in tracker digitization

physics.producers.makeSD.TimeOffsets               :  { inputs : [ "protonTimeMap", "muonTimeMap" ] }
physics.producers.CaloReadoutHitsMaker.TimeOffsets :  { inputs : [ "protonTimeMap", "muonTimeMap" ] }
