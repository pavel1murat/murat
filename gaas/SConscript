#!/usr/bin/env python
#
# Script to build the files found in this directory.
#------------------------------------------------------------------------------
import os
Import('env')
Import('murat_helper')
#------------------------------------------------------------------------------
# 2016-10-10: STNTUPLE link: add ROOT 'EG' library after 'Physics' library
#------------------------------------------------------------------------------
babarlibs = env['BABARLIBS']
rootlibs  = env['ROOTLIBS']

def murat_gaas():

    g4inc    = os.environ['G4INCLUDE'] + '/Geant4'
    g4futureinc = '../inc'
    g4libdir = os.environ['G4LIB']
    g4_version = os.environ['GEANT4_VERSION']
    g4_version=g4_version.replace('_','')
    if g4_version[2] == '9':
        g4_version = g4_version[1]+'0'+g4_version[2:4]
    else:
        g4_version = g4_version[1:5]

# print "GEANT4_VERSION ",  g4_version

# Compiler switches needed by the default G4 build.
    G4CPPFLAGS = [ '-DG4OPTIMISE',           '-DG4VERBOSE',
                   '-DG4_STORE_TRAJECTORY',  '-DG4UI_USE_TCSH ',
                   '-DG4UI_USE',             '-DG4VIS_USE_DAWNFILE',
                   '-DG4VIS_USE_HEPREPFILE', '-DG4VIS_USE_RAYTRACER',
                   '-DG4VIS_USE_VRMLFILE',   '-DG4VIS_USE_ASCIITREE',
                   '-DG4VIS_USE_GAGTREE',    '-DG4VIS_USE',
                   '-DG4VERSION='+g4_version
                   ]

    env['CPPPATH'].append(g4inc);
    env['LIBPATH'].append(os.environ['G4LIB']);

    mu2eopts = env['MU2EOPTS'];

    if mu2eopts[1] == 'qt':
        G4GS_CPPFLAGS = [ '-DG4VIS_USE_OPENGLX',    '-DG4VIS_USE_OPENGL',
                          '-DG4UI_USE_QT',          '-DG4VIS_USE_OPENGLQT' ]
    elif  mu2eopts[1] == 'none':
        G4GS_CPPFLAGS = []
    else:
        G4GS_CPPFLAGS = [ '-DG4VIS_USE_OPENGLX',    '-DG4VIS_USE_OPENGL' ]
#
    if ( not ("EG" in rootlibs)):
        rootlibs.insert(rootlibs.index("Physics")+1,"EG");

    helper = murat_helper();

    helper.handle_dictionaries();

    libs      = [ 'mu2e_Mu2eG4',
                  'mu2e_ConfigTools',
                  'mu2e_GeometryService',
                  'mu2e_ConditionsService',
                  'mu2e_SeedService_SeedService_service',
                  'mu2e_Mu2eUtilities',
                  'mu2e_GeneralUtilities',
                  'mu2e_MCDataProducts',
                  'mu2e_RecoDataProducts',
                  'mu2e_DataProducts',
                  'mu2e_Mu2eInterfaces',
                  babarlibs,
                  'CLHEP',
                  'art_Framework_Core',
                  'art_Framework_Principal',
                  'art_Framework_Services_Registry',
                  'art_Framework_Services_Optional',
                  'art_Framework_Services_Optional_TFileService_service',
                  'art_Framework_Services_Optional_RandomNumberGenerator_service',
                  'art_Persistency_Common',
                  'art_Persistency_Provenance',
                  'art_Utilities',
                  'MF_MessageLogger',
                  rootlibs,
                  'fhiclcpp',
                  'canvas_Persistency_Common',
                  'canvas_Persistency_Provenance',
                  'canvas_Utilities',
                  'cetlib',
                  'xerces-c',
                  'boost_filesystem',
                  'boost_system',
                  ];

# geant4 9.5 and above uses G4GLOBALIBS
    G4GLOBALIBS = [ 'libG4FR',
                    'libG4GMocren',
                    'libG4RayTracer',
                    'libG4Tree',
                    'libG4VRML',
                    'libG4analysis',
                    'libG4digits_hits',
                    'libG4error_propagation',
                    'libG4event',
                    'libG4geometry',
                    'libG4gl2ps',
                    'libG4global',
                    'libG4graphics_reps',
                    'libG4intercoms',
                    'libG4interfaces',
                    'libG4materials',
                    'libG4modeling',
                    'libG4parmodels',
                    'libG4particles',
                    'libG4persistency',
                    'libG4physicslists',
                    'libG4processes',
                    'libG4readout',
                    'libG4run',
                    'libG4track',
                    'libG4tracking',
                    'libG4visHepRep',
                    'libG4visXXX',
                    'libG4vis_management',
                    'libG4zlib'
                    ]

# if mu2eopts[1] != 'none':
#    G4GLOBALIBS.append('libG4OpenGL')

    G4LIBS = G4GLOBALIBS

    list_of_cc_files = Glob('*.cc',strings=True);
    list_of_modules  = Glob('*_module.cc', strings=True)
    skip_list        = list_of_modules

    helper.build_libs(list_of_cc_files,skip_list,libs+G4LIBS);
    helper.build_modules(list_of_modules,[],['libmurat_gaas']+libs+G4LIBS)
#------------------------------------------------------------------------------
# done, end of murat_pet()
#------------------------------------------------------------------------------
# print "tmpdir:"+env['TMP_LIB_DIR']
if (os.getenv("BUILD_GAAS") != None):
    murat_gaas()
