# -*- mode: tcl -*-
#------------------------------------------------------------------------------
# this .FCL file assumes that the input data file has the digitized 
# straw tracker and calorimeter hits stored in it
#------------------------------------------------------------------------------
# $Id: calPatRec_01_BaF2_r_1_1.fcl,v 1.2 2015/02/20 21:14:14 murat Exp $
# $Author: murat $
# $Date: 2015/02/20 21:14:14 $
#
# Original author Rob Kutschke

#include "minimalMessageService.fcl"
#include "standardProducers.fcl"
#include "standardServices.fcl"

#                             Give this process a name
process_name : calPatRec

# Read events from a file (made by example 3)
source : {
#    module_type : EmptyEvent
    module_type : RootInput
    maxEvents   : 100
}

#------------------------------------------------------------------------------
# services
#------------------------------------------------------------------------------
services : {
    message : @local::mf_debugging

    # Adjust configuration of message logger:
    # Load the standard message logger configuration:
    # Threshold=Info (from using mf_interactive). 
    # Limit of 5 per category; then exponential backoff.
    #  message.destinations.log.default.limit : 5
    
    
    TFileService : { fileName   : "calPatRec.root" }
#    RandomNumberGenerator : { }

    user : {
	
	GeometryService        : { inputFile : "murat/geom/geom_01_BaF2_r_1_1.txt" }
	ConditionsService      : { conditionsfile : "Mu2eG4/test/conditions_01.txt" }
	GlobalConstantsService : { inputFile : "Mu2eG4/test/globalConstants_01.txt" }
	G4Helper : { }
	
#	SeedService : @local::automaticSeeds
    }

} # close of services block
#------------------------------------------------------------------------------
# physics
#------------------------------------------------------------------------------
physics : {
    
    producers : {

	# Generate the event
	generate: @local::generate

	# Run G4 and add hits to the event
	g4run : @local::g4run


	protonTimeMap : { module_type : GenerateProtonTimes }
	muonTimeMap   : { module_type : GenerateMuonLife }

	# Form StrawHits (SH).
	makeSD : @local::makeSD
	
	makeSH : @local::makeSHfromSD
	
	makeSHnew: {
	    module_type             : MakeStrawHitsNew
	    diagLevel               : 1
	    StrawHitCollectionLabel : makeSH
	    caloClusterModuleLabel  : makeCaloCluster
	    maxEemc                 : 60.0
	    t1                      : -70.0
	    t2                      : 40.0
	}

	MakeStereoHits: {
	    module_type             :  MakeStrawHitPositions
	}

	FlagStrawHits        : @local::FlagStrawHits
	FlagBkgHits          : @local::FlagBkgHits
	CaloReadoutHitsMaker : @local::MakeCaloReadoutHits
	CaloCrystalHitsMaker : @local::CaloCrystalHitsMaker
	calPatRec            : @local::CalPatRec

	makeCaloCluster      : @local::MakeCaloClusterNew
	trkExtrapol          : @local::TrkExtrapol
	caloMatching         : @local::TrackCaloMatching
    }

    filters : {  
	muHitDisplay         : @local::MuHitDisplay 
    }


    analyzers: {  }
    #------------------------------------------------------------------------------
    # paths
    #------------------------------------------------------------------------------
    p1 : [#generate, g4run,
	#  protonTimeMap, muonTimeMap, 
	 # makeSD, makeSH,
	 # CaloReadoutHitsMaker, CaloCrystalHitsMaker,
	  makeCaloCluster, 
	  makeSHnew,
	  MakeStereoHits, FlagStrawHits, FlagBkgHits, 
	  calPatRec,
	  trkExtrapol, caloMatching,
	  muHitDisplay
	 ]

    e1 : [
	  #outfile
	 ]


    trigger_paths  : [p1]
    end_paths      : [e1]
    
}

outputs: {
    outfile : {
	module_type    : RootOutput
	fileName       : "calPatRec_outFile.root"
	SelectEvents  : { SelectEvents: [ p1 ] }
	outputCommands : ['keep *_*_*_*'
			  #                   , 'drop mu2eStrawDigis_*_*_*'
			  #                   , 'drop mu2eStrawHits_*_*_*'
			  # Uncomment the above line to reduce file size.
			 ]  
    }
}
services.scheduler.wantSummary: true
#------------------------------------------------------------------------------
# print per event timing for ::event entry points
#------------------------------------------------------------------------------
#     services.Timing: { }
#------------------------------------------------------------------------------
# print timing summary
#------------------------------------------------------------------------------
# services.scheduler.wantSummary: true
source.firstRun                            :  1 
#services.user.SeedService.baseSeed         :  1
#services.user.SeedService.maxUniqueEngines :  20

physics.producers.generate.inputfile  : "Mu2eG4/test/genconfig_DownstreameMinus.txt"

physics.producers.MakeStereoHits.StrawHitCollectionLabel : makeSHnew
physics.producers.FlagStrawHits.StrawHitCollectionLabel  : makeSHnew
physics.producers.FlagBkgHits.StrawHitCollectionLabel    : makeSHnew
physics.producers.calPatRec.StrawHitCollectionLabel      : makeSHnew


# physics.producers.makeSD.TimeOffsets               :  { inputs : [ "protonTimeMap", "muonTimeMap" ] }
# physics.producers.CaloReadoutHitsMaker.TimeOffsets :  { inputs : [ "protonTimeMap", "muonTimeMap" ] }
