# -*- mode: tcl -*-
# $Id: muHitDisplay_disk_670_360_670.fcl,v 1.5 2015/01/21 14:44:12 murat Exp $
# $Author: murat $
# $Date: 2015/01/21 14:44:12 $
#
# Original author Rob Kutschke

#include "minimalMessageService.fcl"
#include "standardProducers.fcl"
#include "standardServices.fcl"

#include "murat/fcl/prolog.fcl"

#                             Give this process a name
process_name : muHitDisplay

# Read events from a file (made by example 3)
source : {
  module_type : RootInput
  fileNames : ["data_03.root"]
  maxEvents : -1
}
#------------------------------------------------------------------------------
# services
#------------------------------------------------------------------------------
services : {
  message : @local::mf_debugging

  # Adjust configuration of message logger:
  # Load the standard message logger configuration:
  # Threshold=Info (from using mf_interactive). 
  # Limit of 5 per category; then exponential backoff.
#  message.destinations.log.default.limit : 5
    
    
  TFileService : { fileName   : "muHitDisplay.root" }
  RandomNumberGenerator : { }

  user : {
      GeometryService        : { inputFile      : "murat/geom/geom_01_disk_670_360_670.txt" }
      ConditionsService      : { conditionsfile : "Mu2eG4/test/conditions_01.txt" }
      GlobalConstantsService : { inputFile      : "Mu2eG4/test/globalConstants_01.txt" }
  }

} # close of services block
#------------------------------------------------------------------------------
# physics
#------------------------------------------------------------------------------
physics : {
# sequence: e-, e+, mu-, mu+
    producers : {
	MakeStrawHits  : @local::makeSH
	MakeStereoHits : @local::MakeStereoHits
	FlagStrawHits  : @local::FlagStrawHits
	FlagBkgHits    : @local::FlagBkgHits
	TrkPatRec      : @local::TrkPatRec
	MakeCaloCluster: @local::MakeCaloClusterHack
	TrkExtrapol    : @local::TrkExtrapol
	CaloMatching   : @local::CaloMatching
    }

    filters: {
	MuHitDisplay   : @local::MuHitDisplay
    }

    analyzers: {
    }
#------------------------------------------------------------------------------
# paths
#------------------------------------------------------------------------------
    p1 : [
	  MakeCaloCluster, 
	  MakeStereoHits, FlagStrawHits, FlagBkgHits, 
	  TrkPatRec, 
	  TrkExtrapol, CaloMatching, 
	  MuHitDisplay
	 ]

    #  e1 : [hitDisplay]
    e1 : []
    
    
    trigger_paths  : [p1]
    end_paths      : [e1]
    
}
#------------------------------------------------------------------------------
# print per event timing for ::event entry points
#------------------------------------------------------------------------------
#     services.Timing: { }
#------------------------------------------------------------------------------
# print timing summary
#------------------------------------------------------------------------------
services.scheduler.wantSummary: true

